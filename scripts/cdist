#!/usr/bin/env python3
# -*- coding: utf-8 -*-
#
# 2010-2013 Nico Schottelius (nico-cdist at schottelius.org)
# 2014      Daniel Heule     (hda at sfs.biz)
#
# This file is part of cdist.
#
# cdist is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cdist is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with cdist. If not, see <http://www.gnu.org/licenses/>.
#
#

def commandline():
    """Parse command line"""
    import argparse

    import cdist.banner
    import cdist.config
    import cdist.shell

    # Construct parser others can reuse
    parser = {}
    # Options _all_ parsers have in common
    parser['loglevel'] = argparse.ArgumentParser(add_help=False)
    parser['loglevel'].add_argument('-d', '--debug',
        help='Set log level to debug', action='store_true',
        default=False)
    parser['loglevel'].add_argument('-v', '--verbose',
        help='Set log level to info, be more verbose',
        action='store_true', default=False)

    # Main subcommand parser
    parser['main'] = argparse.ArgumentParser(description='cdist ' + cdist.VERSION,
        parents=[parser['loglevel']])
    parser['main'].add_argument('-V', '--version',
        help='Show version', action='version',
        version='%(prog)s ' + cdist.VERSION)
    parser['sub'] = parser['main'].add_subparsers(title="Commands")

    # Banner
    parser['banner'] = parser['sub'].add_parser('banner', 
        parents=[parser['loglevel']])
    parser['banner'].set_defaults(func=cdist.banner.banner)

    # Config
    parser['config'] = parser['sub'].add_parser('config',
        parents=[parser['loglevel']])
    parser['config'].add_argument('host', nargs='+',
        help='one or more hosts to operate on')
    parser['config'].add_argument('-c', '--conf-dir',
         help='Add configuration directory (can be repeated, last one wins)',
         action='append')
    parser['config'].add_argument('-i', '--initial-manifest', 
         help='Path to a cdist manifest or \'-\' to read from stdin.',
         dest='manifest', required=False)
    parser['config'].add_argument('-n', '--dry-run',
         help='Do not execute code', action='store_true')
    parser['config'].add_argument('-o', '--out-dir',
         help='Directory to save cdist output in', dest="out_path")
    parser['config'].add_argument('-p', '--parallel',
         help='Operate on multiple hosts in parallel',
         action='store_true', dest='parallel')
    parser['config'].add_argument('-s', '--sequential',
         help='Operate on multiple hosts sequentially (default)',
         action='store_false', dest='parallel')
    parser['config'].add_argument('--remote-copy',
         help='Command to use for remote copy (should behave like scp)',
         action='store', dest='remote_copy',
         default=cdist.REMOTE_COPY)
    parser['config'].add_argument('--remote-exec',
         help='Command to use for remote execution (should behave like ssh)',
         action='store', dest='remote_exec',
         default=cdist.REMOTE_EXEC)
    parser['config'].set_defaults(func=cdist.config.Config.commandline)

    # Shell
    parser['shell'] = parser['sub'].add_parser('shell', 
        parents=[parser['loglevel']])
    parser['shell'].add_argument('-s', '--shell',
         help='Select shell to use, defaults to current shell')
    parser['shell'].set_defaults(func=cdist.shell.Shell.commandline)


    for p in parser:
        parser[p].epilog = "Get cdist at http://www.nico.schottelius.org/software/cdist/"

    args = parser['main'].parse_args(sys.argv[1:])

    # Loglevels are handled globally in here and debug wins over verbose
    if args.verbose:
        ch.setLevel(logging.INFO)
    if args.debug:
        ch.setLevel(logging.DEBUG)

    log.debug(args)
    log.info("version %s" % cdist.VERSION)

    # Work around python 3.3 bug:
    # http://bugs.python.org/issue16308
    # http://bugs.python.org/issue9253

    # FIXME: we always print main help, not
    # the help of the actual parser being used!
    if not hasattr(args, "func"):
        parser['main'].print_help()
        sys.exit(0)

    args.func(args)

def loadLogConfig():
    """Loads the log config if the user puts CDIST_LOGCFG to the environ"""
    import logging.config
    import json
    try:
        import yaml
        yaml_present=True
    except ImportError:
        yaml_present=False
    # We need a temporary logger where we can log if someting with the import of the logconfig is going wrong....
    loglog = logging.getLogger('cdist.LOGCFG')
    loglog.addHandler(ch)
    logconf = os.environ['CDIST_LOGCFG']
    if os.path.exists(logconf):
        config = None
        try:
            with open(logconf, 'rt') as f:
                logcfg = f.read()
            try:
                config = json.loads(logcfg)
            except ValueError as e:
                #ok, its not pure json, so if yaml is aviable, we try to decode with yaml
                if yaml_present:
                    try:
                        config = yaml.load(logcfg)
                    except ValueError as ye:
                        #ups, not json, not yaml, so we have no chance ...
                        loglog.error('Unable to decode %s as json or yaml: %s', logconf, ye)
                        sys.exit(5)
                else:
                    # only json decoder aviable, but it's not json ...
                    loglog.error('Unable to decode %s as json: %s', logconf, str(e))
                    sys.exit(5)
            if isinstance(config,dict):
                logging.config.dictConfig(config)
        except PermissionError as e:
            loglog.error('Unable to read %s from CDIST_LOGCFG',e)
            sys.exit(4)
    else:
        loglog.error('Log config file %s from CDIST_LOGCFG doesn\'t exist',logconf)
        sys.exit(3)



if __name__ == "__main__":
    # Sys is needed for sys.exit()
    import sys

    cdistpythonversion = '3.2'
    if sys.version < cdistpythonversion:
        print('Python >= ' + cdistpythonversion +
            ' is required on the source host.', file=sys.stderr)
        sys.exit(1)


    exit_code = 0

    try:
        import logging
        import os
        import re
        import cdist

        #setup logging with fine control for the admin
        rootlog = logging.getLogger()
        rootlog.setLevel(logging.DEBUG)

        # create default console handler with formatter for root logger, for -v and -d
        ch = logging.StreamHandler()
        consformatter = logging.Formatter('%(levelname)s: %(name)s: %(message)s')
        ch.setFormatter(consformatter)
        ch.setLevel(logging.WARNING)
        
        #load additionaly log config from user/admin
        if 'CDIST_LOGCFG' in os.environ:
            loadLogConfig()

        #add the handler after imported log config, so -v and -d do allways work
        rootlog.addHandler(ch)

        log = logging.getLogger("cdist")

        if re.match("__", os.path.basename(sys.argv[0])):
            import cdist.emulator
            emulator = cdist.emulator.Emulator(sys.argv)
            emulator.run()
        else:
            commandline()

    except KeyboardInterrupt:
        exit_code = 2

    except cdist.Error as e:
        log.error(e)
        exit_code = 1

    sys.exit(exit_code)
