#!/bin/sh
#
# 2011 Nico Schottelius (nico-cdist at schottelius.org)
#
# This file is part of cdist.
#
# cdist is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# cdist is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with cdist. If not, see <http://www.gnu.org/licenses/>.
#
#
# __file is a very basic type, which will probably be reused quite often
#
# The 'stat' explorer output is used to trigger server-side notifications,
# but local code is run on the target to actually determine whether a
# chown/chgrp/chmod is needed.  This is because the act of copying the
# file over happens after the explorers have run, and if that happens
# to cause owner/group/mode changes, we need to fix them anyway.
#

destination="/$__object_id"
state_should="$(cat "$__object/parameter/state")"
exists="$(cat "$__object/explorer/exists")"

case "$state_should" in
   present)
      #####
      # Create empty file if there is no source parameter
      #####
      if [ ! -f "$__object/parameter/source" ]; then
         if [ "$exists" = "no" ]; then
            echo touch \"$destination\"
            echo "AUDIT:touched new file $destination" >> "$__object/notifications"
         fi
      fi

      #####
      # Group
      #####
      if [ -f "$__object/parameter/group" ]; then
         new=$(cat "$__object/parameter/group")
         oldgid=$(cat "$__object/explorer/stat" | grep ^gid | awk '{print $2}')
         oldgroup=$(cat "$__object/explorer/stat" | grep ^group | awk '{print $2}')
         if [ "$new" != "$oldgid" -a "$new" != "$oldgroup" ]; then
            echo "AUDIT:chgrp $destination $old -> $new" >> "$__object/notifications"
         fi
         # target check/change if necessary
         cat << DONE
oldgid=\$(ls -n "$destination" | awk '{print \$4}')
oldgroup=\$(ls -l "$destination" | awk '{print \$4}')
if [ "$new" != "\$oldgid" -a "$new" != "\$oldgroup" ]; then
  chgrp "$new" "$destination"
fi
DONE
      fi

      #####
      # Owner
      #####
      if [ -f "$__object/parameter/owner" ]; then
         new=$(cat "$__object/parameter/owner")
         olduid=$(cat "$__object/explorer/stat" | grep ^uid | awk '{print $2}')
         oldowner=$(cat "$__object/explorer/stat" | grep ^owner | awk '{print $2}')
         if [ "$new" != "$olduid" -a "$new" != "$oldowner" ]; then
            echo "AUDIT:chown $destination $old -> $new" >> "$__object/notifications"
         fi
         # target check/change if necessary
         cat << DONE
olduid=\$(ls -n "$destination" | awk '{print \$3}')
oldowner=\$(ls -l "$destination" | awk '{print \$3}')
if [ "$new" != "\$olduid" -a "$new" != "\$oldowner" ]; then
  chown "$new" "$destination"
fi
DONE
      fi

      #####
      # Mode - needs to happen last as a chown/chgrp can alter mode by
      # clearing S_ISUID and S_ISGID bits (see chown(2))
      #####
      if [ -f "$__object/parameter/mode" ]; then 
         new=$(cat "$__object/parameter/mode")
         old=$(cat "$__object/explorer/stat" | grep ^mode | awk '{print $2}')
         # allow $new to start with a 0 (explorer output will not)
         if [ $(echo $new | cut -c1) -eq 0 ]; then
            new=$(echo $new | cut -c2-)
         fi
         if [ "$new" != "$old" ]; then
            : # server-side notifications go here
         fi
         echo "chmod $new \"$destination\""

         # target check/change if necessary
         cat << DONE
new=$(cat "$__object/parameter/mode")
old=\$(ls -l -- "$destination" | sed 's/.\(.........\).*/\1/
h;y/rwsxtST-/IIIIIOOO/;x;s/..\(.\)..\(.\)..\(.\)/|\1\2\3/
y/sStTx-/IIIIOO/;G
s/\n\(.*\)/\1;OOO0OOI1OIO2OII3IOO4IOI5IIO6III7/;:k
s/|\(...\)\(.*;.*\1\(.\)\)/\3|\2/;tk
s/^0*\(..*\)|.*/\1/;q')
# allow \$new to start with a 0 (when the sed expression above will not)
if [ \$(echo \$new | cut -c1) -eq 0 ]; then
  new=\$(echo \$new | cut -c2-)
fi
if [ \$new -ne \$old ]; then
   chmod \$new "$destination"
fi
DONE
      fi

      # Mode - needs to happen last as a chown/chgrp can alter mode by
      # clearing S_ISUID and S_ISGID bits (see chown(2))
      if [ -f "$__object/parameter/mode" ]; then
         echo chmod \"$(cat "$__object/parameter/mode")\" \"$destination\"
      fi
   ;;

   absent)
      if [ "$exists" = "yes" ]; then
         echo rm -f \"$destination\"
         echo "AUDIT:rm $destination" >> "$__object/notifications"
      fi
   ;;

   *)
      echo "Unknown state: $state_should" >&2
      exit 1
   ;;

esac
