# jep, in yaml we can have comments ;-)
# this is only an example, you can extend logging as you wish ...
# for this file, the yaml python module needs to be in place to parse it ...
# version needs to be set to 1, python logging framework needs this !
version: 1
# Don't disable existing loggers, but we setup the loggers for -v and -d after the log config import, so we have no problems
disable_existing_loggers: False

# Define how the log records are printed, 
# see http://docs.python.org/3/library/logging.html#logrecord-attributes
# and http://docs.python.org/3/howto/logging.html#changing-the-format-of-displayed-messages
formatters:
    console: 
        format: '%(levelname)s: %(name)s: %(message)s'
    fileformat: 
        format: '%(asctime)s - %(levelname)s: %(name)s: %(message)s'



# Handlers are the combination of formaters, targets and level filters ...
# for a list of target classes, see http://docs.python.org/3/howto/logging.html#useful-handlers
handlers:
    console: 
        class: logging.StreamHandler
        formatter: console
        level: INFO
        stream: 'ext://sys.stderr'
    logfile1: 
        class: logging.FileHandler
        filename: /tmp/cdist_localhost.log
        formatter: fileformat
        level: DEBUG
    logfile2: 
        class: logging.FileHandler
        filename: /tmp/cdist_global.log
        formatter: fileformat
        level: INFO

# Loggers are the combination of handlers, levels and logging classes
# cdist uses the following log classes
# root --> here comes all logmessages, unless propagate is set to no in a specialized class, configured not in loggers
# cdist --> Log messages from tool
# <hostname> --> Log messages from the named host, for example localhost or wath ever...
loggers:
    cdist:
        handlers: [console, logfile1]
        level: DEBUG
        propagate: yes
    localhost:
        handlers: [logfile1]
        level: DEBUG
        propagate: yes
# root logger is configured here ...    
root:
    handlers: [logfile2]
    level: DEBUG
